{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"../shared/task.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/cdk/drag-drop\";\nfunction TasksComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nfunction TasksComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 18);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.successMessage, \" \");\n  }\n}\nfunction TasksComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 19)(2, \"strong\");\n    i0.ɵɵtext(3, \"Please enter a task!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"button\", 20);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 19)(2, \"strong\");\n    i0.ɵɵtext(3, \"The task must be at least 3 characters long!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"button\", 20);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 19)(2, \"strong\");\n    i0.ɵɵtext(3, \"The field must be at most 50 characters long!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"button\", 20);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 21);\n    i0.ɵɵtext(2, \" No tasks to do yet! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23)(2, \"div\", 24)(3, \"div\", 25);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 24)(6, \"div\", 26)(7, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function TasksComponent_div_37_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const item_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.deleteTask(item_r11._id));\n    });\n    i0.ɵɵelementStart(8, \"span\", 9);\n    i0.ɵɵtext(9, \"delete\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(10, \"div\", 28)(11, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function TasksComponent_div_37_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const item_r11 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.deleteTask(item_r11._id));\n    });\n    i0.ɵɵtext(12, \"Delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r11 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", item_r11.text, \" \");\n  }\n}\nfunction TasksComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 21);\n    i0.ɵɵtext(2, \" No tasks done yet! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23)(2, \"div\", 24)(3, \"div\", 25);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 24)(6, \"div\", 26)(7, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function TasksComponent_div_45_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const item_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.deleteTask(item_r15._id));\n    });\n    i0.ɵɵelementStart(8, \"span\", 9);\n    i0.ɵɵtext(9, \"delete\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(10, \"div\", 28)(11, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function TasksComponent_div_45_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const item_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.deleteTask(item_r15._id));\n    });\n    i0.ɵɵtext(12, \"Delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r15 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", item_r15.text, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return [a0];\n};\n//exports TaskComponent\nexport let TasksComponent = /*#__PURE__*/(() => {\n  class TasksComponent {\n    constructor(cookieService, taskService, fb) {\n      this.cookieService = cookieService;\n      this.taskService = taskService;\n      this.fb = fb;\n      this.newTaskForm = this.fb.group({\n        text: [null, Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(50)])]\n      });\n      this.employee = {};\n      this.todo = [];\n      this.done = [];\n      this.errorMessage = '';\n      this.successMessage = '';\n      this.empId = parseInt(this.cookieService.get('session_user'), 10);\n      this.taskService.getTasks(this.empId).subscribe({\n        next: res => {\n          console.log('Employee', res);\n          this.employee = res;\n        },\n        error: err => {\n          console.error('error', err);\n          this.errorMessage = err.message;\n          this.hideAlert(); //hide alert message\n        },\n\n        complete: () => {\n          this.employee.todo ? this.todo = this.employee.todo : this.todo = [];\n          this.employee.done ? this.done = this.employee.done : this.done = [];\n          console.log('todo', this.todo);\n          console.log('done', this.done);\n        }\n      });\n    }\n    //adds task\n    addTask() {\n      const text = this.newTaskForm.controls['text'].value;\n      this.taskService.addTask(this.empId, text).subscribe({\n        next: task => {\n          console.log('Task added with Id', task.id);\n          const newTask = {\n            _id: task.id,\n            text: text\n          };\n          this.todo.push(newTask); //Add task to todo list\n          this.newTaskForm.reset(); //reset form\n          this.successMessage = 'Task added successfully!';\n          this.hideAlert();\n        },\n        error: err => {\n          console.log('error', err);\n          this.errorMessage = err.message;\n          this.hideAlert(); //hide alert message\n        }\n      });\n    }\n    //delete task\n    deleteTask(taskId) {\n      console.log(`Task item: ${taskId}`);\n      //confirm dialog\n      if (!confirm('Are you sure you want to delete this task?')) {\n        return;\n      }\n      //call the deleteTask() function on the taskService to subscribe to the observable and pass in the empId and taskId\n      this.taskService.deleteTask(this.empId, taskId).subscribe({\n        //if the task is deleted successfully, remove it from the task array\n        next: res => {\n          console.log('Task deleted with id, taskId');\n          if (!this.todo) this.todo = []; //if the todo array is null, set it to an empty array\n          if (!this.done) this.done = []; //if the done array is null, set it to an empty array\n          //we are doing this because we do not know if the task is in the todo or done array\n          this.todo = this.todo.filter(t => t._id.toString() !== taskId); //filter the array and remove the deleted task\n          this.done = this.done.filter(t => t._id.toString() !== taskId); //filter the array and remove the deleted task\n          this.successMessage = 'Task deleted successfully!'; //set the success message\n          this.hideAlert(); //call the hideAlert() function\n        },\n\n        //if there is an error, lof it to the console and set the error message\n        error: err => {\n          console.log('error', err);\n          this.errorMessage = err.message;\n          this.hideAlert(); //calls the hideAlert() function\n        }\n      });\n    }\n    //drop event for the todo and done lists using the cdkDragDrop directive from the drag and drop module\n    drop(event) {\n      if (event.previousContainer === event.container) {\n        //if the item is dropped in the same container, move it to the new index\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        console.log('Moved item in array', event.container.data); //log the new array to the console\n        //call the updateTaskList() function and pass in the empId, todo and done arrays\n        this.updateTaskList(this.empId, this.todo, this.done);\n      } else {\n        //if the item is dropped in a different container, move it to the new container\n        transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n        console.log('Moved item in array', event.container.data); //log the new array to the console\n        //call the updateTaskList() function and pass in the empId, todo and done arrays\n        this.updateTaskList(this.empId, this.todo, this.done);\n      }\n    }\n    //hides alert after 5 seconds\n    hideAlert() {\n      setTimeout(() => {\n        this.errorMessage = '';\n        this.successMessage = '';\n      }, 5000);\n    }\n    /**\n     * @description Updates the task list for the employee with the specified empId and passes in the todo and done arrays\n     * @param empId\n     * @param todo\n     * @param done\n     * @returns void\n    */\n    updateTaskList(empId, todo, done) {\n      this.taskService.updateTask(empId, todo, done).subscribe({\n        next: res => {\n          console.log('Task updated successfully');\n        },\n        error: err => {\n          console.log('error', err); //log the error message to the console\n          this.errorMessage = err.message; //set the error message\n          this.hideAlert(); //call the hideAlert() function\n        }\n      });\n    }\n    static #_ = this.ɵfac = function TasksComponent_Factory(t) {\n      return new (t || TasksComponent)(i0.ɵɵdirectiveInject(i1.CookieService), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TasksComponent,\n      selectors: [[\"app-tasks\"]],\n      decls: 46,\n      vars: 19,\n      consts: [[1, \"container-fluid\", \"pt-2\", 2, \"min-height\", \"900px\"], [1, \"text-center\"], [1, \"row\", \"justify-content-center\", \"pt-4\"], [1, \"col-sm-10\", \"col-md-8\", \"col-lg-6\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\", \"mb-3\"], [\"type\", \"text\", \"formControlName\", \"text\", \"placeholder\", \"Add new task\", 1, \"form-control\"], [\"type\", \"submit\", \"id\", \"btnAdd\", 1, \"btn\", \"btn-outline-secondary\", 3, \"disabled\"], [1, \"material-icons\"], [1, \"row\", \"gy-2\", \"justify-content-center\"], [1, \"col-sm-5\", \"col-md-5\", \"col-lg-3\"], [1, \"p-3\", \"border\", \"bg-light\"], [\"cdkDropList\", \"\", 1, \"container\", \"task-column\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"todoList\", \"cdkDropList\"], [\"cdkDrag\", \"\", \"class\", \"mt-2\", 4, \"ngFor\", \"ngForOf\"], [\"doneList\", \"cdkDropList\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\", \"alert-dismissible\", \"fade\", \"show\"], [\"type\", \"button\", \"data-bs-dismiss\", \"alert\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"alert\", \"alert-info\"], [\"cdkDrag\", \"\", 1, \"mt-2\"], [1, \"row\", \"border\", \"bg-white\"], [1, \"col-sm-6\"], [1, \"card-body\"], [1, \"card-body\", \"float-end\"], [1, \"btn\", 3, \"click\"], [1, \"col-12\", \"d-sm-none\", \"d-md-none\", \"d-lg-none\", \"d-xl-none\", \"d-grid\", \"gap-2\", \"p-2\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n      template: function TasksComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n          i0.ɵɵtext(2, \"Welcome To Your Tasks!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"p\");\n          i0.ɵɵtext(4, \"Enter a task below to add it to your ToDo list.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\");\n          i0.ɵɵtext(6, \"When task is complete, drag-and-drop it in the Done column.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"p\");\n          i0.ɵɵtext(8, \"Did you realize you no longer need to complete a task - that's cool - just delete it!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"p\");\n          i0.ɵɵtext(10, \"Maybe you thought the task was complete but realized it wasn't? That's cool, too - just drag-and-drop it back in the ToDo column!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"p\");\n          i0.ɵɵtext(12, \">What if one of your tasks becomes top priority? Don't sweat it, just rearrange your tasks by dragging and dropping them into the preferred new order!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"main\")(14, \"div\", 2)(15, \"div\", 3);\n          i0.ɵɵtemplate(16, TasksComponent_div_16_Template, 3, 1, \"div\", 4);\n          i0.ɵɵtemplate(17, TasksComponent_div_17_Template, 3, 1, \"div\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(18, \"div\", 2)(19, \"div\", 3)(20, \"form\", 5);\n          i0.ɵɵlistener(\"ngSubmit\", function TasksComponent_Template_form_ngSubmit_20_listener() {\n            return ctx.addTask();\n          });\n          i0.ɵɵelementStart(21, \"div\", 6);\n          i0.ɵɵelement(22, \"input\", 7);\n          i0.ɵɵelementStart(23, \"button\", 8)(24, \"span\", 9);\n          i0.ɵɵtext(25, \"add\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(26, TasksComponent_div_26_Template, 5, 0, \"div\", 4);\n          i0.ɵɵtemplate(27, TasksComponent_div_27_Template, 5, 0, \"div\", 4);\n          i0.ɵɵtemplate(28, TasksComponent_div_28_Template, 5, 0, \"div\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"div\", 10)(30, \"div\", 11)(31, \"h4\", 1);\n          i0.ɵɵtext(32, \"ToDo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"div\", 12)(34, \"div\", 13, 14);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function TasksComponent_Template_div_cdkDropListDropped_34_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(36, TasksComponent_div_36_Template, 3, 0, \"div\", 4);\n          i0.ɵɵtemplate(37, TasksComponent_div_37_Template, 13, 1, \"div\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(38, \"div\", 11)(39, \"h4\", 1);\n          i0.ɵɵtext(40, \"Done\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"div\", 12)(42, \"div\", 13, 16);\n          i0.ɵɵlistener(\"cdkDropListDropped\", function TasksComponent_Template_div_cdkDropListDropped_42_listener($event) {\n            return ctx.drop($event);\n          });\n          i0.ɵɵtemplate(44, TasksComponent_div_44_Template, 3, 0, \"div\", 4);\n          i0.ɵɵtemplate(45, TasksComponent_div_45_Template, 13, 1, \"div\", 15);\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          const _r5 = i0.ɵɵreference(35);\n          const _r8 = i0.ɵɵreference(43);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.newTaskForm);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", !ctx.newTaskForm.valid);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"required\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"minlength\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"maxlength\"));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.todo)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(15, _c0, _r8));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.todo.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.todo);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"cdkDropListData\", ctx.done)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(17, _c0, _r5));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.done.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.done);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.CdkDropList, i5.CdkDrag],\n      styles: [\".container-fluid[_ngcontent-%COMP%]{background-color:#000;height:100%;width:100%;margin-top:-1%;margin-bottom:-.5%}main[_ngcontent-%COMP%]{background-image:url(/assets/background.jpeg);border:3px solid rgb(10,171,225);margin-right:20%;margin-left:20%;padding-bottom:10%}h1[_ngcontent-%COMP%]{margin-top:7%;margin-bottom:2%;color:#946b2d}h4[_ngcontent-%COMP%]{color:#fff}p[_ngcontent-%COMP%]{color:#fff;text-align:center;font-size:1em;border-bottom:4%}#btnAdd[_ngcontent-%COMP%]{color:#fff;border:2px solid white}\"]\n    });\n  }\n  return TasksComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}